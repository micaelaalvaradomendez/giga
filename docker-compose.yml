version: '3.8'

services:
  # Base de Datos PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: giga-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=giga
      - POSTGRES_USER=giga_user
      - POSTGRES_PASSWORD=giga2025
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./bd/init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - giga-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U giga_user -d giga"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Backend Django
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
    container_name: giga-django
    restart: unless-stopped
    environment:
      - DEBUG=True
      - SECRET_KEY=django-insecure-giga-dev-key-change-in-production
      - DB_NAME=giga
      - DB_USER=giga_user
      - DB_PASSWORD=giga2025
      - DB_HOST=postgres
      - DB_PORT=5432
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,backend
      - CORS_ALLOW_ALL_ORIGINS=True
    volumes:
      - ./back:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    networks:
      - giga-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "manage.py", "check", "--database", "default"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Frontend Svelte
  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    container_name: giga-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://backend:8000
    volumes:
      - ./front:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "3000:3000"
    networks:
      - giga-network
    depends_on:
      - backend

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: giga-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/logs:/var/log/nginx/giga
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
    networks:
      - giga-network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  
  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: giga-minio
    command: server /data --console-address ":9090"
    restart: unless-stopped
    ports:
      - "9000:9000" # API
      - "9090:9090" # Console
    environment:
      - MINIO_ROOT_USER=giga-user
      - MINIO_ROOT_PASSWORD=giga-password-change-me
    volumes:
      - minio_data:/data
    networks:
      - giga-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: giga-n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - WEBHOOK_URL=http://localhost:5678/
      - TZ=America/Argentina/Buenos_Aires
      - N8N_BASIC_AUTH_ACTIVE=false
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - giga-network
    depends_on:
      - minio

volumes:
  postgres_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  frontend_node_modules:
    driver: local
  minio_data:
    driver: local
  n8n_data:
    driver: local

networks:
  giga-network:
    driver: bridge
    name: giga-network